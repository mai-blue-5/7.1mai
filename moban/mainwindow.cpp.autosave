#include "mainwindow.h"
#include "ui_mainwindow.h"
//#include <QPixmap>
//#include <QScreen>
//#include <QPainter>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/imgproc/imgproc.hpp"
#include <fstream>
#include <math.h>
#include <QtDebug>
#include <opencv2/imgproc/types_c.h>
#include <QDateTime>
#include <QString>
#include <QFileDialog>
#include <QtGui>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    QWidget::showMaximized();
    //connect(pushButton, SIGNAL(clicked()), this,
    //SLOT(pushButton1_Clicked()));
    //connect(pushButton_2, SIGNAL(clicked()), this,
    //SLOT(pushButton2_Clicked()));
     connect(ui->pushButton,&QPushButton::clicked,this,&MainWindow::on_pushButton_clicked);
}

MainWindow::~MainWindow()
{
    delete ui;
}

QPixmap MatToQT(const cv::Mat& mat) {
    // 将OpenCV的Mat格式转换为Qt的QImage格式
    QImage img(mat.data, mat.cols, mat.rows, mat.step, QImage::Format_RGB888);

    // 将QImage格式转换为QPixmap格式
    QPixmap pixmap = QPixmap::fromImage(img);

    return pixmap;
}
void MainWindow::on_pushButton_2_clicked()
{
    QFileDialog::getOpenFileName(this, "open file", "D:/photo/books");
}

void MainWindow::on_pushButton_clicked()
{
    cv::Mat srcImage = cv::imread("D:/photo/books/moban5.jpg", cv::IMREAD_COLOR);
    cv::Mat src = cv::imread("D:/photo/books/moban5.jpg", cv::IMREAD_COLOR);
    // 模板图像列表，每个模板对应一个字符
    std::vector<cv::Mat> templateImages;
    templateImages.push_back(cv::imread("D:/photo/books/11.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/22.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/44.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/55.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/77.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/88.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/CC.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/xiegang.png", cv::IMREAD_COLOR));
    templateImages.push_back(cv::imread("D:/photo/books/dian.png", cv::IMREAD_COLOR));
    // 添加更多模板图像...

    // 字符标签
    std::vector<std::string> labels = {"1", "2","4","5","7","8","C","xg","dian"};
    // 添加更多字符标签...

    for (size_t i = 0; i < templateImages.size(); i++) {
        cv::Mat templImage = templateImages[i];
        cv::Mat resultImage;
        cv::matchTemplate(srcImage, templImage, resultImage, cv::TM_CCOEFF_NORMED);
        double minVal, maxVal;
        cv::Point minLoc, maxLoc;
        cv::Point matchLoc;
        double threshold = 0.5; // 可根据实际情况调整
        while (true) {
            cv::minMaxLoc(resultImage, &minVal, &maxVal, &minLoc, &maxLoc);
                if(maxVal >= threshold){
                    matchLoc = maxLoc;
        cv::rectangle(srcImage, matchLoc, cv::Point(matchLoc.x + templImage.cols, matchLoc.y + templImage.rows), cv::Scalar(0, 255, 0), 2);
        cv::putText(srcImage, labels[i], matchLoc, cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 0, 200), 2);
        cv::floodFill(resultImage, maxLoc, cv::Scalar(0), 0, cv::Scalar(0.1), cv::Scalar(1.0));
            }
            else {
                break;
            }
        }
    }
    //cv::imshow("Result", srcImage);
    //cv::imwrite("result.jpg", srcImage);
    //cv::waitKey(0);
    QPixmap picQPixmap1 = MatToQT(srcImage);
    QPixmap picQPixmap = MatToQT(src);
    ui->label1->setPixmap(picQPixmap1);
    ui->label1->setScaledContents(true);
    ui->label2->setPixmap(picQPixmap);
    ui->label2->setScaledContents(true);
   // ui->label1->setAlignment(Qt::AlignCenter);


    //ui->label2->setScaledContents(true);
}
